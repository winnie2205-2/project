const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');

const defaultTokenExpiration = '1h';

const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ["Admin", "Owner", "Employee"], default: "Employee" },
    token: { type: String, default: "" }, 
    resetPasswordToken: { type: String },
    resetPasswordExpires: { type: Date },

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    status: { type: String, enum: ["enable", "disable"], default: "enable" },

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Logs ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á User
    activityLogs: [
        {
            action: { type: String, required: true },  // ‡πÄ‡∏ä‡πà‡∏ô "Login", "Delete Product"
            timestamp: { type: Date, default: Date.now }, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
            details: { type: mongoose.Schema.Types.Mixed } // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô { productId: "xxx" }
        }
    ]

}, {
    versionKey: false,
    timestamps: true
});

userSchema.pre("save", async function (next) {
    if (this.isModified("password")) {
      this.password = await bcrypt.hash(this.password, 10); // 10 ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á salt
    }
    next();
  });
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  userSchema.methods.isPasswordCorrect = async function (password) {
    return bcrypt.compare(password, this.password);
  };

// ‚úÖ Middleware ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
userSchema.statics.authenticate = async function (email, password) {
    const user = await this.findOne({ email });

    if (!user) {
        throw new Error("User not found");
    }

    if (user.status === "disable") {
        throw new Error("Your account is disabled. Please contact the administrator.");
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
        throw new Error("Invalid credentials");
    }

    return user;
};

// üìå Method: ‡πÄ‡∏û‡∏¥‡πà‡∏° Log ‡∏Ç‡∏≠‡∏á User
userSchema.methods.addLog = async function(action, details = {}) {
    this.activityLogs.push({
        action,
        details,
        timestamp: new Date()
    });
    await this.save();
};

// üìå Generate JWT Token ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô Database
userSchema.methods.generateAuthToken = async function () {
    const token = jwt.sign(
        { username: this.username, role: this.role },
        process.env.JWT_SECRET,
        { expiresIn: defaultTokenExpiration }
    );

    this.token = token;
    await this.save();

    return token;
};

// üìå Generate Password Reset Token
userSchema.methods.generateResetToken = function () {
    const resetToken = crypto.randomBytes(32).toString('hex');
    this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex');
    this.resetPasswordExpires = Date.now() + 10 * 60 * 1000;
    return resetToken;
};

// üìå Ensure sensitive data is not included when returning JSON
userSchema.methods.toJSON = function () {
    const obj = this.toObject();
    delete obj.password;
    delete obj.resetPasswordToken;
    delete obj.resetPasswordExpires;
    return obj;
};

const User = mongoose.model('User', userSchema);
module.exports = User;
