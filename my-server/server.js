const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const dotenv = require('dotenv');
const multer = require('multer');
const XLSX = require('xlsx');
const csvParser = require('csv-parser');
const fs = require('fs');
const nodemailer = require('nodemailer');
const jwt = require("jsonwebtoken");
const bcrypt = require('bcryptjs');
const config = require('./config/config.js');

const { authenticate, isAdmin } = require("./middleware/authMiddleware");
const itemsRoutes = require('./routes/itemsroute');
const userRoutes = require('./routes/userRoute'); 
const categoryRoutes = require('./routes/categoryroute'); 
const profileroutes = require('./routes/profileroute'); 

const User = require('./models/userModel'); // Import User Model
const Item = require('./models/itemModel'); 
const Category = require('./models/categoryModel');



dotenv.config();

const app = express();

// Middleware
app.use(express.json());
app.use(cors({
    origin: 'http://localhost:3000', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ frontend ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å localhost:3000
    allowedHeaders: ['Authorization', 'Content-Type'], // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï header authorization
  }))

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect(config.url)
    .then(() => console.log('‚úÖ Connected to MongoDB'))
    .catch(err => {
        console.error('‚ùå MongoDB connection error:', err);
        process.exit(1);
    });


// Routes
app.use('/api/users', userRoutes);
app.use('/api/items', itemsRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/profile', profileroutes);

// Static Files
const staticDirectory = path.join(__dirname, '../my-app');
app.use(express.static(staticDirectory));
app.use(express.static('assets'));

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Inventory
app.get('/inventory.html', authenticate, (req, res) => {
    res.sendFile(path.join(staticDirectory, 'inventory.html'));
}); 

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á Admin ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
app.get("/admin.html", authenticate, isAdmin, (req, res) => {
    res.sendFile(path.join(__dirname, "public", "admin.html"));
});

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: "nasaza300@gmail.com",
        pass: "ewbx wlyn iveg ismm"
    }
});

// ‚úÖ API ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
app.post("/api/forgot-password", async (req, res) => {
    try {
        const { email } = req.body;
        if (!email) {
            return res.status(400).json({ error: "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
        const token = jwt.sign({ id: user._id }, "secret-key", { expiresIn: "15m" });
        const resetLink = `http://localhost:5000/resetpass.html?token=${token}`;

        // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        const mailOptions = {
            from: "nasaza300@gmail.com",
            to: email,
            subject: "üîê ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            html: `<p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</p>
                   <p><a href="${resetLink}">${resetLink}</a></p>
                   <p>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ</p>`
        };

        // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                console.error("‚ùå Error sending email:", error);
                return res.status(500).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ" });
            }
            res.json({ message: "‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" });
        });

    } catch (error) {
        console.error("‚ùå Error in forgot-password:", error);
        res.status(500).json({ error: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" });
    }
});


// ‚úÖ API ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
app.post("/api/reset-password", async (req, res) => {
    try {
        const { token, newPassword } = req.body;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
        const decoded = jwt.verify(token, "secret-key");

        // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await User.findByIdAndUpdate(decoded.id, { password: hashedPassword });

        res.json({ message: "‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!" });

    } catch (error) {
        console.error("‚ùå Error in reset-password:", error);
        res.status(400).json({ error: "‚ùå ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
});

// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Item Model)
app.get('/search', authenticate, async (req, res) => {
    const searchQuery = req.query.name;
  
    try {
        const items = await Item.find({
            name: { $regex: searchQuery, $options: 'i' }
        });

        res.json(items);
    } catch (error) {
        res.status(500).json({ error: "Error fetching items" });
    }
});

app.get('/api/users/role_check', (req, res) => {
    const token = req.headers.authorization?.split(' ')[1]; // ‡∏ï‡∏±‡∏î "Bearer " ‡∏≠‡∏≠‡∏Å
    if (!token) return res.status(403).json({ error: "No token provided" });

    try {
        const decoded = jwt.verify(token, 'secret-key'); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á token
        res.json({ role: decoded.role });
    } catch (error) {
        res.status(403).json({ error: "Invalid or expired token" });
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÉ‡∏´‡∏°‡πà
app.post('/api/users/add', async (req, res) => {
    const { User_ID, Username, Gmail, Password, status, Role } = req.body;

    console.log("Request body:", req.body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!User_ID || !Username || !Gmail || !Password || !Role) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Role ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô enum ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const validRoles = ["Admin", "Owner", "Employee"];
    if (!validRoles.includes(Role)) {
        return res.status(400).json({ error: 'Role ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ Admin, Owner ‡∏´‡∏£‡∏∑‡∏≠ Employee' });
    }

    try {
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(Password, salt);  // hash password

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        const newUser = new User({
            username: Username,
            email: Gmail,
            password: hashedPassword,
            role: Role,
            token: '',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
            resetPasswordToken: '',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
            resetPasswordExpires: null,  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô null
        });

        console.log("New User object:", newUser);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á MongoDB
        await newUser.save();

        res.status(201).json({ message: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user: newUser });
    } catch (error) {
        console.error("Error creating user:", error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
});

// Remove the second declaration of 'upload'
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
if (!fs.existsSync('uploads')) {
    fs.mkdirSync('uploads');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const saveToDatabase = async (importedData, res, fileType) => {
    try {
        for (let data of importedData) {
            let category = await Category.findOne({ categoryName: data.categoryName });

            if (!category) {
                category = new Category({ categoryName: data.categoryName });
                await category.save();
                console.log("Category created:", category.categoryName);
            }

            const item = new Item({
                categoryID: category._id,
                name: data.Name,
                location: data.Location,
                qty: parseInt(data.qty) || 0, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà 0
                price: parseFloat(
                    typeof data.price === 'string' ? data.price.replace(/,/g, '') : data.price
                ) || 0, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà 0
                status: data.Status || 'Unavailable',
                reorderPoint: data['Reorder point'] ? parseInt(data['Reorder point']) : null
            });

            await item.save();
            console.log("Item saved successfully:", item);
        }

        res.status(200).json({ message: 'Data imported successfully' });
    } catch (error) {
        console.error("Error during import:", error);
        res.status(500).json({ error: 'Failed to import data' });
    }
};


// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.post('/api/import', upload.single('file'), async (req, res) => {
    if (!req.file) {
        console.error('No file uploaded');
        return res.status(400).json({ error: 'No file uploaded' });
    }

    const fileType = req.body.fileType;
    const filePath = req.file.path;

    console.log('File uploaded successfully:', req.file);

    try {
        let importedData = [];

        if (fileType === 'Excel(CSV)' && path.extname(filePath) === '.csv') {
            const results = [];
            fs.createReadStream(filePath)
                .pipe(csvParser())
                .on('data', (data) => results.push(data))
                .on('end', async () => {
                    console.log('CSV Data:', results);
                    importedData = results;
                    await saveToDatabase(importedData, res, 'CSV');
                })
                .on('error', (err) => {
                    console.error('Error reading CSV file:', err);
                    res.status(500).json({ error: 'Error reading CSV file' });
                });
        } else if (fileType === 'Excel' && (path.extname(filePath) === '.xls' || path.extname(filePath) === '.xlsx')) {
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);

            console.log('Excel Data:', data);
            importedData = data;

            await saveToDatabase(importedData, res, 'Excel');
        } else {
            return res.status(400).json({ error: 'Unsupported file type' });
        }
    } catch (error) {
        console.error('Error importing data:', error);
        res.status(500).json({ error: 'Failed to import data', details: error.message });
    }
});


// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`‚úÖ Server is running on port ${PORT}`);
});
