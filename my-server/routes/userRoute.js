const express = require('express');
const User = require('../models/userModel');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const { authenticate } = require('../middleware/authMiddleware');
const router = express.Router();

router.get('/users', authenticate, async (_, res) => {
    try {
        const users = await User.find({}, '-password'); // ‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á password
        const formattedUsers = users.map(user => ({
            _id: user._id.toString(), // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ _id ‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            username: user.username,
            role: user.role,
            email: user.email,
            status: user.status,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
        }));

        res.json(formattedUsers);
    } catch (error) {
        console.error('üö® Error fetching users:', error);
        res.status(500).json({ message: 'Server error' });
    }
});

// üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á User
router.post('/create', async (req, res) => {
    try {
        const { username, email, password, role } = req.body;
        const existingUser = await User.findOne({ $or: [{ username }, { email }] });

        if (existingUser) {
            return res.status(400).json({ error: 'Username or email already exists' });
        }

        const newUser = new User({ username, email, password, role });
        await newUser.save();

        await newUser.addLog('create', {});

        res.status(201).json({ message: 'User created successfully' });
    } catch (error) {
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

// Login
router.post('/login', async (req, res) => {
    console.log("üìå Login API called with:", req.body);

    const { username, password } = req.body;
    if (!username || !password) {
        console.log("‚ùå Missing username or password");
        return res.status(400).json({ message: "Username and password required" });
    }

    try {
        const user = await User.findOne({ username });
        console.log("üîç User found in database:", user);

        if (!user) {
            console.log("‚ùå User not found");
            return res.status(401).json({ message: "Invalid username or password" });
        }

        const isMatch = await user.comparePassword(password);
        console.log("üîë Password match:", isMatch);

        if (!isMatch) {
            console.log("‚ùå Password incorrect");
            return res.status(401).json({ message: "Invalid username or password" });
        }

        // ‡πÉ‡∏ä‡πâ await ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏£‡∏≠‡∏à‡∏ô `token` ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
        const token = await user.generateAuthToken(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° `await` ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

        await user.addLog('login', {});

        console.log("‚úÖ Login successful, token generated");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á URL ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        let redirectUrl = '';
        if (user.role === 'Admin') {
            redirectUrl = '/admin.html';  // ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ admin
        } else if (user.role === 'Employee') {
            redirectUrl = '/inventory.html';  // ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ index
        }

        // ‡∏™‡πà‡∏á token, user ‡πÅ‡∏•‡∏∞ redirectUrl ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà client
        res.json({ token, user: user.toJSON(), redirectUrl });
    } catch (error) {
        console.error("üö® Error during login:", error);
        res.status(500).json({ message: "Server error" });
    }
});


// üìå Forgot Password
router.post("/forgot-password", async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: "User not found" });

        const resetToken = crypto.randomBytes(32).toString('hex');
        const hashedResetToken = crypto.createHash('sha256').update(resetToken).digest('hex');

        user.resetPasswordToken = hashedResetToken;
        user.resetPasswordExpires = Date.now() + 3600000; // 1 ‡∏ä‡∏°.
        await user.save();

        const resetLink = `http://localhost:5000/api/user/reset-password/${resetToken}`;

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
        });

        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: user.email,
            subject: "Reset Password",
            text: `Click here to reset your password: ${resetLink}`,
        });

        res.json({ message: "Password reset email sent" });
    } catch (error) {
        res.status(500).json({ message: "Server error" });
    }
});

// üìå Reset Password
router.post("/reset-password/:token", async (req, res) => {
    try {
        const { token } = req.params;
        const { password } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ password ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!password) {
            return res.status(400).json({ message: "Password is required" });
        }

        // ‡πÅ‡∏Æ‡∏ä token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        const hashedToken = crypto.createHash('sha256').update(token).digest('hex');

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ token ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        const user = await User.findOne({
            resetPasswordToken: hashedToken,
            resetPasswordExpires: { $gt: Date.now() } // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token
        });

        if (!user) {
            return res.status(400).json({ message: "Invalid or expired token" });
        }

        // ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const hashedPassword = await bcrypt.hash(password, 10);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        user.password = hashedPassword;
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await user.save();

        res.json({ message: "Password has been reset successfully" });
    } catch (error) {
        console.error("Error resetting password:", error);
        res.status(500).json({ message: "Server error" });
    }
});

router.get('/role_check', authenticate, async (req, res) => {
    try {
        if (!req.user) {
            return res.status(401).json({ error: 'Unauthorized, no user found' });
        }

        console.log('üîç req.user:', req.user);

        const { role, username } = req.user;
        const user = await User.findOne({ role, username });

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        console.log('‚úÖ User found:', user);
        res.json({ username: req.user.username, role: req.user.role });

    } catch (error) {
        console.error('üö® Server Error:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
});

// üìå Edit User
router.put('/edit/:id', authenticate, async (req, res) => {
    try {
        const { id } = req.params;
        const { username, email, password } = req.body;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (username) user.username = username;
        if (email) user.email = email;
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            user.password = hashedPassword;
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        await user.save();
        res.json({ message: 'User updated successfully' });
    } catch (error) {
        console.error('üö® Error updating user:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

router.delete('/delete/:id', authenticate, async (req, res) => {
    try {
        const { id } = req.params;
        console.log("Deleting user ID:", id);

        const user = await User.findByIdAndDelete(id);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        await user.addLog('delete', {});

        res.json({ message: 'User deleted successfully' });
    } catch (error) {
        console.error('üö® Error deleting user:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

router.get('/userlogs', authenticate, async (req, res) => {
    try {
        const logs = await UserLog.find().sort({ timestamp: -1 }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤
        res.json(logs);
    } catch (error) {
        res.status(500).json({ error: 'Server error' });
    }
});


module.exports = router;
